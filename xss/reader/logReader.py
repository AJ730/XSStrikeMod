import sqlite3import hashlibfrom urllib.request import urlopen, Requestimport urllib.errorimport requests# create connection to dbimport urllib3.utildef testUrl(url, field, value):    succeeded = ""    no_change = ""    unknown_response = ""    blocked = ""    # normalRequest = Request(url, headers={'User-Agent': 'Mozilla/5.0'})    normalHash = ""    try:        normalResponse = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})        normalResponse.raise_for_status()        normalHash = hashlib.sha224(normalResponse.text.encode('utf-8')).hexdigest()    except requests.exceptions.HTTPError:        return "", "", "true", ""    attackurl = url.strip() + "?" + field + "=" + value    print(attackurl)    # xssRequest = Request(urllib3.util.parse_url(attackurl), headers={'User-Agent': 'Mozilla/5.0'})    xssHash = ""    try:        xssResponse = requests.get(attackurl, headers={'User-Agent': 'Mozilla/5.0'})        xssResponse.raise_for_status()        xssHash = hashlib.sha224(xssResponse.text.encode('utf-8')).hexdigest()    except requests.exceptions.HTTPError:        blocked = "true"    if normalHash == xssHash:        no_change = "true"    else:        succeeded = "true"    print(no_change)    return succeeded, no_change, unknown_response, blockedconn = sqlite3.connect("vuln.db")c = conn.cursor()# Dont run this twice, else you'll be adding duplicates.c.execute("""CREATE TABLE IF NOT EXISTS vulnerability (            webpage TEXT,            type TEXT,            exploit TEXT,            succeeded TEXT,            no_change TEXT,            unknown_response TEXT,            blocked TEXT    )""")# Edit the log file herefile = open("xsstrike.log", 'r')file = file.readlines()n = 0while n < len(file):    if "VULN - Vulnerable webpage:" in file[n]:        split_line = file[n].split(": ")        webpage = split_line[-1].strip()        webpage = webpage.replace("\x1b[92m", "").replace("\x1b[0m", " ")        if "VULN - Vector for" in file[n + 1]:            split_line1 = file[n + 1].split("for ")            vulnerability = split_line1[-1].strip()            vulnerability = vulnerability.replace("\x1b[92m", "").replace("\x1b[0m: ", " ")            split_line2 = vulnerability.split(" ")            vuln_type = split_line2[0]            vuln_exploit = split_line2[1]            succeeded, no_change, unknown_response, blocked = testUrl(webpage, vuln_type, vuln_exploit)            dict_vuln = (webpage, vuln_type, vuln_exploit, succeeded, no_change, unknown_response, blocked)            c.execute("INSERT INTO vulnerability VALUES (?, ?, ?, ?, ?, ?, ?)", dict_vuln)            n = n + 1            continue        else:            n = n + 1            continue    else:        n = n + 1        continueconn.commit()conn.close()vuln_dict = {}